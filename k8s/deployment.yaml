---
apiVersion: v1
kind: Service
metadata:
  name: {{service.name}}
spec:
  selector:
    app: {{service.name}}
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  name: {{service.name}}-metrics
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: "/metrics"
    prometheus.io/port: "9102"
spec:
  selector:
    app: {{service.name}}
  ports:
    - name: metrics
      port: 9102
      targetPort: 9102
  type: ClusterIP
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata: {name: {{service.name}}}
spec:
  replicas: 1
  selector:
    matchLabels: {app: {{service.name}}}
  strategy:
    rollingUpdate: {maxSurge: 1, maxUnavailable: 0}
    type: RollingUpdate
  revisionHistoryLimit: 1
  template:
    metadata:
      labels: {app: {{service.name}}}
      name: {{service.name}}
    spec:
      containers:
      - image: {{build.images["Dockerfile"]}}
        imagePullPolicy: IfNotPresent
        name: {{service.name}}
        volumeMounts:
        - mountPath: "/etc/envoy"
          name: config-volume
        resources:
          requests:
            memory: {{service.min_memory}}
            cpu: {{service.min_cpu}}
          limits:
            memory: {{service.max_memory}}
            cpu: {{service.max_cpu}}
        terminationMessagePath: /dev/termination-log
      - name: statsd-exporter
        image: prom/statsd-exporter
      volumes:
      - configMap:
          name: {{service.name}}-config
        name: config-volume
      restartPolicy: Always
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
{% set routes = service.routes or {} -%}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{service.name}}-config
data:
  envoy.json: |
    {
      "admin":{
        "access_log_path":"/tmp/admin_access_log",
        "address":"tcp://127.0.0.1:8001"
      },
      "cluster_manager":{
        "clusters":[
    {% for prefix, weights in routes|dictsort %}
      {% for service in ([weights] if weights is string else weights) %}
          {
            "connect_timeout_ms":1000,
            "hosts":[
              {
                "url":"tcp://{{service}}:80"
              }
            ],
            "lb_type":"round_robin",
            "name":"{{service}}",
            "type":"strict_dns"
          },
      {% endfor %}
    {% endfor %}
          {
            "connect_timeout_ms":1000,
            "hosts":[
              {
                "url":"tcp://auth:80"
              }
            ],
            "lb_type":"round_robin",
            "name":"ext_auth",
            "type":"strict_dns"
          },
          {
            "connect_timeout_ms":1000,
            "hosts":[
              {
                "url":"tcp://auth:80"
              }
            ],
            "lb_type":"round_robin",
            "name":"fallback",
            "type":"strict_dns"
          }
        ]
      },
      "listeners":[
        {
          "address":"tcp://0.0.0.0:80",
          "filters":[
            {
              "name":"http_connection_manager",
              "type":"read",
              "config":{
                "access_log":[
                  {
                    "path":"/tmp/access_log"
                  }
                ],
                "codec_type":"auto",
                "filters":[
                  {
                    "name":"extauth",
                    "type":"decoder",
                    "config":{
                      "cluster":"ext_auth",
                      "timeout_ms":3000
                    }
                  },
                  {
                    "config":{},
                    "name":"router",
                    "type":"decoder"
                  }
                ],
                "route_config":{
                  "virtual_hosts":[
                    {
                      "name":"backend",
                      "domains":[
                        "*"
                      ],
                      "routes":[
                    {% for prefix, weights in routes|dictsort %}
                        {
                          "prefix":"{{prefix}}",
                          "prefix_rewrite":"/",
                          "weighted_clusters": {
                            "clusters": [
                          {% for service, weight in ([(weights, 100)] if weights is string else weights|dictsort) %}
                              { "name": "{{service}}", "weight": {{weight}} }{%- if not loop.last %},{%- endif%}
                          {% endfor %}
                            ]
                          }
                        },
                    {% endfor %}
                        {
                          "prefix":"/",
                          "cluster": "fallback"
                        }
                      ]
                    }
                  ]
                },
                "stat_prefix":"ingress_http"
              }
            }
          ]
        }
      ],
      "stats_flush_interval_ms":1000,
      "statsd_local_udp_port":9125
    }
